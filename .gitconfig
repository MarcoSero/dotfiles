[user]
	name = Marco Sero
	email = marco@marcosero.com
[credential]
	helper = osxkeychain
[core]
	excludesfile = /Users/Marco/.gitignore_global
    # editor = mvim -f --nomru -c \"au VimLeave * !open -a iTerm\"
    editor = vim
	pager = less -F -X
[pager]
    difftool = true
[difftool]
	prompt = false
[diff]
    tool = icdiff
    #tool = fugitive
    #tool = mvimdiff
[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[difftool "mvimdiff"]
    cmd = "~/.bin/mvimgitdiff.sh " $LOCAL $REMOTE
[difftool "icdiff"]
    cmd = icdiff $LOCAL $REMOTE --no-bold
[mergetool]
	prompt = false
    keepbackup=false
[merge]
    tool = fugitive
    #tool = mvimdiff
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[mergetool "mvimdiff"]
      # cmd="/Applications/MacVim.app/Contents/MacOS/Vim -g -f '+windo set diff scrollbind scrollopt+=hor nowrap' -c 'Gdiff' $MERGED -c 'au VimLeave * !open -a iTerm'"
      cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
[mergetool "fugitive"]
	cmd = vim -f -c \"Gdiff\" \"$MERGED\"
[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"
[heroku]
	account = personal
[push]
	default = simple
[alias]
    # cleanup merged branches
	cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
    # cleanup merged remote branches
    cleanupr = "!git fetch --prune ; git branch -r --merged | grep origin | grep -v '>' | grep  -v '\\*\\|master\\|develop' | xargs -L1 | cut -d"/" -f2- | xargs git push origin --delete"
    cleanupr2 = "!git branch -r --merged | awk -F'/' '/^ *origin/{if(!match($0, /(>|master)/)){print $2}}' | xargs git push origin --delete"
	cleanf = clean -d -x -f
    # Yammer-specific
    update-shared = !git add Shared && git commit -m 'Update Shared submodule'
    # h = head
    head = !git r -1
    h = !git head
    # hp = head with patch
    hp = "!. ~/.githelpers && show_git_head"
    # r = recent commits, only current branch
    r = !GIT_NO_PAGER=1 git l -30
    # ra = recent commits, all reachable refs
    ra = !git r --all
    # l = all commits, only current branch
    l = "!. ~/.githelpers && pretty_git_log"
    # la = all commits, all reachable refs
    la = !git l --all
    ds = diff --staged
    st = status -sb
    amend = commit --amend -C HEAD
    undo = reset --soft HEAD^
    ls = log --pretty=format:"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]" --decorate --date=short
    standup = log --since '1 day ago' --oneline --author marco@marcosero.com
    graph = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset'
    dt = difftool
[Color]
  	diff = auto
  	status = auto
  	branch = auto
[color "status"]
  	changed = yellow
  	added = green
  	untracked = red
[help]
	autocorrect = -1
[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
	path = 
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

